Date: 2013/04/01

This file contains instructions on how to set and use the "SubmissionHelper.sh" script



--Note:
--------

- lines starting by % are command lines

- command lines with <TEXT> are to be adapted to your specific "TEXT" values


--Obtaining a scp account:
-------------

0) If not familiar with SSH, please see: http://www.wikihow.com/Use-SSH

1) decide on the user name of your team; it must follow the pattern
"kws-<TEAM>[_<SITE>]" (<TEAM> or <SITE> can not contain - or _)

2) ensure you have a valid SSH Protocol 2 (using '% ssh_keygen -t dsa'
or '% ssh_keygen -t rsa') public key file (with a non empty passphrase
of 12 or more characters), as you will need it to provide it to NIST
for account creation purpose

3) email 'indus@nist.gov' with:
- your user, site and team names
- the list of users expected to use the service with contact information (email + phone)
- attach to the email the public keys for the given user (do not inline its text)
- provide us with a list of the IP subnet that will need access to the ssh server

4) you should receive an email from NIST with a confirmation or
request for clarification related to the creation of the account.

5) edit the SubmissionHelper_common.cfg 's 'scp_user' line to reflect
your scoring transfer system account information. Test to confirm your
ssh setup is operational by using:

% ./scp_tester.sh

which will use the setup information in your configuration file
and try to upload it to the Scoring Server.
Should it succeed, you will be told so, and your scp account set up
should be complete.
Otherwise an error message will be printed. Please send the generated
log file to us for review.

NOTE: Please remember that access to the system is done via 'scp'
using public key + passphrase only.

NOTE: the first time any 'scp' is done with the Scoring Server, you
might be prompted for accepting the SSH key of the remote host, please
enter 'yes'.

6) edit the SubmissionHelper_common.cfg 's 'contact_email' line to reflect
the email address of the person to contact in case of a problem or questions 
with your submission


--Prerequisites for using the Submission Helper tool:
-------------

- make sure that at least F4DE's "make mincheck" and "make
KWSEvalcheck" complete succesfully ('make' commands are run from the
base F4DE's directory)

- you must have a functional scp command with an associated account
(with a passphrase) on the scoring transfer system. We strongly
recommend that an 'ssh-agent' be in place to faciliate data transfer,
as every communication with the scoring server is done via 'scp'
(including status checks).  For details on 'ssh-agent', please refer
to your 'man ssh-agent' as well as
https://en.wikipedia.org/wiki/Ssh-agent

- require "JobRunner.pl". See:
http://www.nist.gov/itl/iad/mig/tools.cfm

- a copy of the cumulative release of scoring software driver files
for Babel KWS and STT evaluations (for future reference we will call
it 'IndusDB')

- (for scoring your own STT input files) require the 'sctk' tool installed
(at least version 2.4.7).  See:
http://www.nist.gov/itl/iad/mig/tools.cfm

- an understanding of the EXPID composition from the BABEL Evaluation
Plan

- the matching KWSEval system input files (ECF and Keyword List files)
to the EXPID you are submitting



--Configuration Steps:
-------------------

In order to be able to use the tool (SubmissionHelper.sh), its
configuration file must be edited: 
- For all, edit the SubmissionHelper_common.cfg's 'scp_user' line to reflect 
your scoring transfer system account information.
- Review KWS12_SubmissionHelper.cfg, KWS13_SubmissionHelper.cfg, and 
  KWS14_SubmissionHelper.cfg and confirm the values match your settings.  
  If you follow the default setup, these will not change.

The default configuration files are designed to make everything work
from the current directory, 'JobRunner.pl', and the 'bin' directory
for the SCTK installation.  For this to happen, please make symbolic
link to your installation location of the tools to the current
directory:

% ln -s <JOBRUNNER_DIRECTORY>/JobRunner.pl

% ln -s <SCTK_INSTALL_BIN_DIRECTORY> sctkbin

Make the local copy of your 'IndusDB' available as the
SubmissionHelper's <DBDIR>. Each evaluation year requires a separate
link.  IndusDBs are cumulative so linking to a single release is
expected.  Execute the following:

% ln -s <KWS13_INDUSDB_DIR> KWS14-dbDir
% ln -s KWS14-dbDir KWS12-dbDir
% ln -s KWS14-dbDir KWS13-dbDir

Please insure that you have completed the scp account setup and testing.

Familiarize yourself with the list of options of the tool by running
it without any option:

% ./SubmissionHelper.shpo

Confirm that the "SubmissionHelpoer.sh" tool is functional by calling
it from the current directory with a invalid file (such as one of the
configuration file), which should fail, but will confirm that the
expected entries from the configuration file are presumed valid:

% ./SubmissionHelper.sh KWS12_SubmissionHelper.cfg

This should fail due a validation error (if the needed
directories/files specified by the configuration file are present)

From within the <DBDIR> are some samples that can be used for testing
your setup; for example:

% ./SubmissionHelper.sh \
   -S KWS14-dbdir/samples/KWS14_NIST_IARPA-babel107b-v0.7_conv-dev_BaDev_KWS_p-word-m10xf20_1.sysdesc.txt \
   KWS14-dbdir/samples/KWS14_NIST_IARPA-babel107b-v0.7_conv-dev_BaDev_KWS_p-word-m10xf20_1.kwslist2.xml

should prompt a submission log similar to:

-- Loading Configuration file: /Users/jon/Projects/F4DE/F4DE-3.1.0/KWSEval/BABEL/Participants/SubmissionHelper_common.cfg
-- Loading Configuration file: /Users/jon/Projects/F4DE/F4DE-3.1.0/KWSEval/BABEL/Participants/KWS14_SubmissionHelper.cfg
-- Checking for system description file
== [F4DE: F4DE-3.1.0] [scp_user:kwstest-jon] [hostIP:129.6.227.176] [contact_email:jon@nist.gov]
** Submission file: [KWS14-dbdir/samples/KWS14_NIST_IARPA-babel107b-v0.7_conv-dev_BaDev_KWS_p-word-m10xf20_1.kwslist2.xml]
   Internal SHA256 : 5b1915dd6e6af95ca82b4f23f89e769c1e23f81596df9c97ccdfc13c42147244
++ Validation step
  -> validating submission file
++ Archive Generation and Upload
  -> transfer file
Remote SHA256 : 9cd1354eff324ab96ac8062f0227b7a4f91cdf5078394ef4524ab03738235685
++ Awaiting scoring server completion
Remote Server: Awaiting Status update from scoring server
Remote Server: Downloaded and Awaiting Processing (0%)
Remote Server: Validated (37.5%)
Remote Server: Scored (62.5%)
Remote Server: Report Uploaded (100%)
++ Downloading Results
  <- Trying to download result file
** Result file: /Users/jon/Projects/F4DE/F4DE-3.1.0/KWSEval/BABEL/Participants/_KWS14-downloads/9cd1354eff324ab96ac8062f0227b7a4f91cdf5078394ef4524ab03738235685.tar.bz2
** Uncompressed in: /Users/jon/Projects/F4DE/F4DE-3.1.0/KWSEval/BABEL/Participants/KWS14-Results/KWS14_NIST_IARPA-babel107b-v0.7_conv-dev_BaDev_KWS_p-word-m10xf20_1.kwslist2.xml

(this may take a few minutes to complete)

NOTE: the first time any 'scp' is done with the Scoring Server, you
might be prompted for accepting the SSH key of the remote host, please
enter 'yes'.


-- Submiting an EXPID:
-------------------

Running "SubmissionHelper.sh" without any option will display its
usage entry.

Simply run the "SubmissionHelper.sh" tool (from the current location)
with a valid EXPID submission, and follow the step by step description
of the processing:

% ./SubmissionHelper.sh <EXPID>.kwslist.xml
  or
% ./SubmissionHelper.sh <EXPID>.ctm

Run:
% ./SubmissionHelper.sh -S <SYSTEMDESCRIPTION>.txt <EXPID>.<EXT>
  to add a system description to your submission

NOTE 1: It is safe to interupt (via Ctrl-C) the submission after seeing
the message "++ Awaiting scoring server completion" and restart it at
a later time by running the same command line with the exact same
"<EXPID>.<EXT>" file. There is also a means to ask the tool to exit
after uploading the files, this is done using: % ./SubmissionHelper.sh
-Q <EXPID>.<EXT>

NOTE : It is possible to resume a submission that already passed
validation and uploading step from an Internal SHA256 and
"Evaluation mode" (the first component of the EXPID), using:
% ./SubmissionHelper.sh -C <INTERNAL_SHA256> -M <EVALUATION_MODE>

NOTE 2: It is possible to resume a submission that already passed
validation and uploading step from a Remote SHA256 and
"Evaluation mode" (the first component of the EXPID), using:
% ./SubmissionHelper.sh -D <REMOTE_SHA256> -M <EVALUATION_MODE>

RESUBMISSION NOTE 1: The tool creates an "Internal SHA256" value from
the file content alone in order to avoid duplicate submissions with
the same file content. Therefore, should a file be submitted that was
already submitted previously, the tool will consider the submission to
be a continuation of a past submission, and skip steps previously
performed. This behavior can be noticed when looking at the tool
ouptut, as the tool will notofy the user that it did skip a step (ex:
"-- validated earlier, skipping revalidation" or "-- transfered
earlier, skipping reupload"). In order to resubmit a submission file,
use:
% ./SubmissionHelper.sh -R <EXPID>.<EXT>

RESUBMISSION NOTE 2: If you have submitted the exact same
<EXPID>.<EXT> file content in the past (see tool output for "skipping"
messages) or are changing the content of the "System Description",
please insure this is considered a new submission by the scoring
server, using -R.

-- Internal and Remote SHA256:
-------------------

The tool use both an "Internal SHA256" and a "Remote SHA256".

* The "Internal SHA256" is used locally and is the SHA256 digest of
the submission file. This avoids sending submissions to the Scoring
Server of two identical files from a same source, and allows the
SubmissionHelper tool to be able to be re-run at a later date with the
exact same submission file and continue from where it left off.

If you are trying to submit a file sent previously with the same EXPID
but a different version number, the tool will refuse to do so because
the new filename and the old filename do not match.
 - If this is an actual replacement submission, use the tool's -R
option to resubmit using the same "Internal SHA256".
 - If this is a new and different submission which happens to have the
same exact content, please modify the file content so that it is at
least one byte different (add an extra comment or such), so that its
"Internal SHA256" differs and the tool can too be run later on that
file to continue where this specific fiel left off.

* The "Remote SHA256" is the SHA256 digest obtained from a modified
version of the submission file where some additional comments are
added. This value is used on the Scoring Server and should be sent to
the Scoring Server team if problems arise.

* A list of the know "Internal SHA256", "Remote SHA256" and
 "Submission File" can be obtained by running:
% ./InternalSHA_to_RemoteSHA.pl

See the tool usage to learn how to produce HTML or CSV output file, or search a specific
SHA256/filename text.
